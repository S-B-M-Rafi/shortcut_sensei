<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shortcut Sensei - Sign In/Sign Up</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:400,800">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            background: #000;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            font-family: 'Montserrat', sans-serif;
            height: 100vh;
            margin: -20px 0 50px;
            overflow-x: hidden;
        }

        h1 {
            font-weight: bold;
            margin: 0;
        }

        h2 {
            text-align: center;
            color: white;
            margin-bottom: 20px;
            font-size: 2.5rem;
            letter-spacing: 1px;
            text-shadow: 0 0 10px rgba(255, 75, 43, 0.7);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { text-shadow: 0 0 10px rgba(255, 75, 43, 0.7); }
            50% { text-shadow: 0 0 20px rgba(255, 65, 108, 0.9); }
            100% { text-shadow: 0 0 10px rgba(255, 75, 43, 0.7); }
        }

        p {
            font-size: 14px;
            font-weight: 100;
            line-height: 20px;
            letter-spacing: 0.5px;
            margin: 20px 0 30px;
        }

        span {
            font-size: 12px;
        }

        a {
            color: #333;
            font-size: 14px;
            text-decoration: none;
            margin: 15px 0;
            transition: all 0.3s ease;
        }

        a:hover {
            color: #FF416C;
        }

        button {
            border-radius: 20px;
            border: 1px solid #FF4B2B;
            background-color: #FF4B2B;
            color: #FFFFFF;
            font-size: 12px;
            font-weight: bold;
            padding: 12px 45px;
            letter-spacing: 1px;
            text-transform: uppercase;
            transition: all 0.3s ease;
            cursor: pointer;
            margin: 10px 0;
        }

        button:hover {
            background-color: #FF416C;
            box-shadow: 0 0 15px rgba(255, 65, 108, 0.5);
        }

        button:active {
            transform: scale(0.95);
        }

        button:focus {
            outline: none;
        }

        button.ghost {
            background-color: transparent;
            border-color: #FFFFFF;
        }

        button.ghost:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        form {
            background-color: #FFFFFF;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            padding: 0 50px;
            height: 100%;
            text-align: center;
        }

        input {
            background-color: #eee;
            border: none;
            border-radius: 10px;
            padding: 12px 15px;
            margin: 8px 0;
            width: 100%;
            transition: all 0.3s ease;
        }

        input:focus {
            background-color: #fff;
            box-shadow: 0 0 8px rgba(255, 65, 108, 0.5);
            outline: none;
        }

        .container {
            background-color: black;
            border-radius: 10px;
            box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25),
                        0 10px 10px rgba(0, 0, 0, 0.22);
            position: relative;
            overflow: hidden;
            width: 768px;
            max-width: 100%;
            min-height: 580px;
            animation: fadeIn 1s;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-container {
            position: absolute;
            top: 0;
            height: 100%;
            transition: all 0.6s ease-in-out;
        }

        .sign-in-container {
            left: 0;
            width: 50%;
            z-index: 2;
        }

        .container.right-panel-active .sign-in-container {
            transform: translateX(100%);
        }

        .sign-up-container {
            left: 0;
            width: 50%;
            opacity: 0;
            z-index: 1;
        }

        .container.right-panel-active .sign-up-container {
            transform: translateX(100%);
            opacity: 1;
            z-index: 5;
            animation: show 0.6s;
        }

        @keyframes show {
            0%, 49.99% {
                opacity: 0;
                z-index: 1;
            }
            50%, 100% {
                opacity: 1;
                z-index: 5;
            }
        }

        .overlay-container {
            position: absolute;
            top: 0;
            left: 50%;
            width: 50%;
            height: 100%;
            overflow: hidden;
            transition: transform 0.6s ease-in-out;
            z-index: 100;
        }

        .container.right-panel-active .overlay-container {
            transform: translateX(-100%);
        }

        .overlay {
            background: #FF416C;
            background: -webkit-linear-gradient(to right, #FF4B2B, #FF416C);
            background: linear-gradient(to right, #FF4B2B, #FF416C);
            background-repeat: no-repeat;
            background-size: cover;
            background-position: 0 0;
            color: #FFFFFF;
            position: relative;
            left: -100%;
            height: 100%;
            width: 200%;
            transform: translateX(0);
            transition: transform 0.6s ease-in-out;
        }

        .overlay::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 56 28" width="56" height="28"><path fill="%23ffffff10" d="M56 26v2h-7.75c2.3-1.27 4.94-2 7.75-2zm-26 2a2 2 0 1 0-4 0h-4.09A25.98 25.98 0 0 0 0 16v-2c.67 0 1.34.02 2 .07V14a2 2 0 0 0-2-2v-2a4 4 0 0 1 3.98 3.6 28.09 28.09 0 0 1 2.8-3.86A8 8 0 0 0 0 6V4a9.99 9.99 0 0 1 8.17 4.23c.94-.95 1.96-1.83 3.03-2.63A13.98 13.98 0 0 0 0 0h7.75c2 1.1 3.73 2.63 5.1 4.45 1.12-.72 2.3-1.37 3.53-1.93A20.1 20.1 0 0 0 14.28 0h2.7c.45.56.88 1.14 1.29 1.74 1.3-.48 2.63-.87 4-1.15-.11-.2-.23-.4-.36-.59H26v.07a28.4 28.4 0 0 1 4 0V0h4.09l-.37.59c1.38.28 2.72.67 4.01 1.15.4-.6.84-1.18 1.3-1.74h2.69a20.1 20.1 0 0 0-2.1 2.52c1.23.56 2.41 1.2 3.54 1.93A16.08 16.08 0 0 1 48.25 0H56c-4.58 0-8.65 2.2-11.2 5.6 1.07.8 2.09 1.68 3.03 2.63A9.99 9.99 0 0 1 56 4v2a8 8 0 0 0-6.77 3.74c1.03 1.2 1.97 2.5 2.79 3.86A4 4 0 0 1 56 10v2a2 2 0 0 0-2 2.07 28.4 28.4 0 0 1 2-.07v2c-9.2 0-17.3 4.78-21.91 12H30zM7.75 28H0v-2c2.81 0 5.46.73 7.75 2zM56 20v2c-.67 0-1.34-.02-2-.07V22a2 2 0 0 0 2 2v2a4 4 0 0 1-3.98-3.6 28.09 28.09 0 0 1-2.8 3.86A8 8 0 0 0 56 30v2a9.99 9.99 0 0 1-8.17-4.23c-.94.95-1.96 1.83-3.03 2.63A13.98 13.98 0 0 0 56 36h-7.75a16.08 16.08 0 0 1-5.1-4.45c-1.12.72-2.3 1.37-3.53 1.93A20.1 20.1 0 0 0 41.72 36h-2.7c-.45-.56-.88-1.14-1.29-1.74-1.3.48-2.63.87-4 1.15.11.2.23.4.36.59H30v-.07a28.4 28.4 0 0 1-4 0V36h-4.09l.37-.59c-1.38-.28-2.72-.67-4.01-1.15-.4.6-.84 1.18-1.3 1.74h-2.69a20.1 20.1 0 0 0 2.1-2.52c-1.23-.56-2.41-1.2-3.54-1.93A16.08 16.08 0 0 1 7.75 36H0c4.58 0 8.65-2.2 11.2-5.6-1.07-.8-2.09-1.68-3.03-2.63A9.99 9.99 0 0 1 0 32v-2a8 8 0 0 0 6.77-3.74c-1.03-1.2-1.97-2.5-2.79-3.86A4 4 0 0 1 0 26v-2a2 2 0 0 0 2-2.07 28.4 28.4 0 0 1-2 .07v-2c9.2 0 17.3-4.78 21.91-12H26l.09.21A28.4 28.4 0 0 1 30 22.99V23z"></path></svg>');
            animation: animatePattern 30s linear infinite;
        }

        @keyframes animatePattern {
            0% { background-position: 0 0; }
            100% { background-position: 100% 100%; }
        }

        .container.right-panel-active .overlay {
            transform: translateX(50%);
        }

        .overlay-panel {
            position: absolute;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            padding: 0 40px;
            text-align: center;
            top: 0;
            height: 100%;
            width: 50%;
            transform: translateX(0);
            transition: transform 0.6s ease-in-out;
        }

        .overlay-left {
            transform: translateX(-20%);
        }

        .container.right-panel-active .overlay-left {
            transform: translateX(0);
        }

        .overlay-right {
            right: 0;
            transform: translateX(0);
        }

        .container.right-panel-active .overlay-right {
            transform: translateX(20%);
        }

        .social-container {
            margin: 20px 0;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .social-container a {
            border: 1px solid #DDDDDD;
            border-radius: 50%;
            display: inline-flex;
            justify-content: center;
            align-items: center;
            margin: 0 5px;
            height: 40px;
            width: 40px;
            font-size: 18px;
            color: #333;
            transition: all 0.3s ease;
        }

        .social-container a:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .social-container .facebook:hover {
            color: #3b5998;
            border-color: #3b5998;
        }

        .social-container .google:hover {
            color: #db4437;
            border-color: #db4437;
        }

        .social-container .linkedin:hover {
            color: #0077b5;
            border-color: #0077b5;
        }

        .forgot-password {
            margin-top: 15px;
            cursor: pointer;
            color: #333;
            font-size: 13px;
            text-decoration: underline;
            transition: all 0.3s ease;
        }

        .forgot-password:hover {
            color: #FF416C;
        }

        #messageContainer {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 15px 25px;
            font-size: 16px;
            border-radius: 8px;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
            max-width: 80%;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            animation: slideDown 0.5s;
        }

        @keyframes slideDown {
            from { top: -50px; opacity: 0; }
            to { top: 20px; opacity: 1; }
        }

        .success {
            background-color: #4caf50;
            color: white;
        }

        .error {
            background-color: #f44336;
            color: white;
        }

        .form-divider {
            display: flex;
            align-items: center;
            margin: 20px 0;
            width: 100%;
        }

        .form-divider .line {
            flex: 1;
            height: 1px;
            background-color: #ddd;
        }

        .form-divider .text {
            padding: 0 10px;
            color: #777;
            font-size: 12px;
        }

        /* Forgot password modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1001;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.7);
            animation: fadeIn 0.3s;
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 5px 30px rgba(0, 0, 0, 0.3);
            width: 400px;
            max-width: 90%;
            animation: scaleIn 0.3s;
        }

        @keyframes scaleIn {
            from { transform: scale(0.8); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .close:hover {
            color: #FF416C;
        }

        #resetPasswordForm {
            padding: 0;
        }

        footer {
            background-color: rgba(34, 34, 34, 0.8);
            color: #fff;
            font-size: 14px;
            bottom: 0;
            position: fixed;
            left: 0;
            right: 0;
            text-align: center;
            z-index: 999;
            padding: 10px 0;
        }

        footer p {
            margin: 10px 0;
        }

        footer a {
            color: #3c97bf;
        }
    </style>
</head>
<body>
    <div id="messageContainer" style="display: none;"></div>
    <h2>Shortcut Sensei</h2>
    <div class="container" id="container">
        <div class="form-container sign-up-container">
            <form id="registrationForm">
                <h1>Create Account</h1>
                <div class="social-container">
                    <a href="#" class="social google" id="google-signup"><i class="fab fa-google"></i></a>
                    <a href="#" class="social facebook" id="facebook-signup"><i class="fab fa-facebook-f"></i></a>
                    <a href="#" class="social linkedin" id="linkedin-signup"><i class="fab fa-linkedin-in"></i></a>
                </div>
                <span>or use your email for registration</span>
                <input type="text" id="signup_name" placeholder="Name" required />
                <input type="email" id="signup_email" placeholder="Email" required />
                <input type="password" id="signup_password" placeholder="Password" required />
<div id="password-validation" style="display: none; text-align: left; margin: 5px 0; font-size: 12px;"></div>

                <button type="submit">Sign Up</button>
            </form>
        </div>
        <div class="form-container sign-in-container">
            <form id="loginForm">
                <h1>Sign in</h1>
                <div class="social-container">
                    <a href="#" class="social google" id="google-signin"><i class="fab fa-google"></i></a>
                    <a href="#" class="social facebook" id="facebook-signin"><i class="fab fa-facebook-f"></i></a>
                    <a href="#" class="social linkedin" id="linkedin-signin"><i class="fab fa-linkedin-in"></i></a>
                </div>
                <span>or use your account</span>
                <input type="email" id="login_email" placeholder="Email" required />
                <input type="password" id="login_password" placeholder="Password" required />
                <span class="forgot-password" id="forgotPassword">Forgot your password?</span>
                <button type="submit">Sign In</button>
<div id="verification-section" style="margin-top: 15px;">
    <span style="font-size: 12px;">Haven't received verification email?</span>
    <button type="button" id="resendVerificationBtn" style="font-size: 12px; background: none; border: none; color: #FF416C; text-decoration: underline; cursor: pointer; padding: 0;">Resend</button>
</div>
            </form>
        </div>
        <div class="overlay-container">
            <div class="overlay">
                <div class="overlay-panel overlay-left">
                    <h1>Welcome Back!</h1>
                    <p>To keep connected with us please login with your personal info</p>
                    <button class="ghost" id="signIn">Sign In</button>
                </div>
                <div class="overlay-panel overlay-right">
                    <h1>Hello, Friend!</h1>
                    <p>Enter your personal details and start journey with us</p>
                    <button class="ghost" id="signUp">Sign Up</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Forgot Password Modal -->
    <div id="forgotPasswordModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2 style="color: #333; margin-top: 0;">Reset Password</h2>
            <p style="color: #666;">Enter your email address and we'll send you a link to reset your password.</p>
            <form id="resetPasswordForm">
                <input type="email" id="reset_email" placeholder="Email" required />
                <button type="submit" style="width: 100%;">Send Reset Link</button>
            </form>
        </div>
    </div>

    <footer>
        <p>© 2025 Shortcut Sensei - All Rights Reserved</p>
    </footer>

    <script type="module">

import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-app.js";
import { 
    getAuth, 
    createUserWithEmailAndPassword,
    signInWithEmailAndPassword,
    GoogleAuthProvider,
    FacebookAuthProvider,
    OAuthProvider,
    signInWithPopup,
    sendPasswordResetEmail,
    sendEmailVerification,
    signOut
} from "https://www.gstatic.com/firebasejs/9.22.0/firebase-auth.js";
import { 
    getDatabase, 
    ref, 
    set, 
    get, 
    child 
} from "https://www.gstatic.com/firebasejs/9.22.0/firebase-database.js";

// Initialize Firebase
const firebaseConfig = {
  apiKey: "AIzaSyDgzylhHW05EQLuJwVIHdXWbVVeJhpQHxU",
  authDomain: "shortcut-sensei-2459c.firebaseapp.com",
  projectId: "shortcut-sensei-2459c",
  storageBucket: "shortcut-sensei-2459c.appspot.com",
  messagingSenderId: "93261862581",
  appId: "1:93261862581:web:0844aaf7ac50e1eaaed0fc",
  measurementId: "G-K53XF0N322"
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getDatabase(app);

// Auth providers setup
const googleProvider = new GoogleAuthProvider();
const facebookProvider = new FacebookAuthProvider();
const linkedinProvider = new OAuthProvider('linkedin.com');

// UI Elements
const signUpButton = document.getElementById('signUp');
const signInButton = document.getElementById('signIn');
const container = document.getElementById('container');
const forgotPasswordLink = document.getElementById('forgotPassword');
const forgotPasswordModal = document.getElementById('forgotPasswordModal');
const closeModalBtn = document.querySelector('.close');
const passwordInput = document.getElementById('signup_password');
const passwordValidationMessage = document.getElementById('password-validation');
const resendVerificationBtn = document.getElementById('resendVerificationBtn');

// Message handling function
function showMessage(message, type) {
    const messageContainer = document.getElementById('messageContainer');
    messageContainer.textContent = message;
    messageContainer.className = type; // 'success' or 'error'
    messageContainer.style.display = 'block';

    // Hide the message automatically after 5 seconds
    setTimeout(() => {
        messageContainer.style.display = 'none';
    }, 5000);
}

// Password validation function
function validatePassword(password) {
    // Password must be at least 8 characters long and include a number, lowercase letter, uppercase letter, and special character
    const minLength = password.length >= 8;
    const hasNumber = /\d/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasUppercase = /[A-Z]/.test(password);
    const hasSpecial = /[!@#$%^&*(),.?":{}|<>]/.test(password);
    
    return {
        isValid: minLength && hasNumber && hasLowercase && hasUppercase && hasSpecial,
        minLength,
        hasNumber,
        hasLowercase,
        hasUppercase,
        hasSpecial
    };
}

// Live password validation feedback
passwordInput.addEventListener('input', () => {
    const password = passwordInput.value;
    const validation = validatePassword(password);
    
    // Update validation message
    if (!validation.isValid) {
        let message = 'Password must:';
        if (!validation.minLength) message += '<br>- Be at least 8 characters long';
        if (!validation.hasNumber) message += '<br>- Include at least one number';
        if (!validation.hasLowercase) message += '<br>- Include at least one lowercase letter';
        if (!validation.hasUppercase) message += '<br>- Include at least one uppercase letter';
        if (!validation.hasSpecial) message += '<br>- Include at least one special character (!@#$%^&*(),.?":{}|<>)';
        
        passwordValidationMessage.innerHTML = message;
        passwordValidationMessage.style.color = '#f44336';
        passwordValidationMessage.style.display = 'block';
    } else {
        passwordValidationMessage.innerHTML = 'Password meets all requirements!';
        passwordValidationMessage.style.color = '#4caf50';
        passwordValidationMessage.style.display = 'block';
    }
});

// Panel switching animation
signUpButton.addEventListener('click', () => {
    container.classList.add("right-panel-active");
});

signInButton.addEventListener('click', () => {
    container.classList.remove("right-panel-active");
});

// Email & Password Registration
document.getElementById('registrationForm').addEventListener('submit', (e) => {
    e.preventDefault();
    
    const name = document.getElementById('signup_name').value;
    const email = document.getElementById('signup_email').value;
    const password = document.getElementById('signup_password').value;
    
    // Validate password before submission
    const validation = validatePassword(password);
    if (!validation.isValid) {
        showMessage("Password doesn't meet security requirements.", "error");
        return;
    }
    
    // Create user with Firebase Authentication
    createUserWithEmailAndPassword(auth, email, password)
        .then((userCredential) => {
            const user = userCredential.user;
            
            // Send email verification
            return sendEmailVerification(user).then(() => {
                // Store additional user info in Realtime Database
                return set(ref(db, 'users/' + user.uid), {
                    username: name,
                    email: email,
                    createdAt: Date.now(),
                    emailVerified: false
                });
            });
        })
        .then(() => {
            // Sign out the user until they verify their email
            return signOut(auth);
        })
        .then(() => {
            showMessage("Registration successful! Please check your email to verify your account before logging in.", "success");
            document.getElementById('registrationForm').reset();
            container.classList.remove("right-panel-active"); // Switch to sign-in panel
        })
        .catch((error) => {
            console.error("Registration error:", error);
            showMessage(error.message, "error");
        });
});

// Email & Password Sign In
document.getElementById('loginForm').addEventListener('submit', (e) => {
    e.preventDefault();
    
    const email = document.getElementById('login_email').value;
    const password = document.getElementById('login_password').value;
    
    signInWithEmailAndPassword(auth, email, password)
        .then((userCredential) => {
            const user = userCredential.user;
            
            // Check if email is verified
            if (!user.emailVerified) {
                // Sign out the user
                return signOut(auth).then(() => {
                    throw new Error("Please verify your email before signing in. Check your inbox.");
                });
            }
            
            showMessage("Sign in successful! Welcome back.", "success");
            
            // Redirect after a short delay
            setTimeout(() => {
                window.location.href = "home-page.html";
            }, 1500);
        })
        .catch((error) => {
            console.error("Login error:", error);
            showMessage(error.message, "error");
        });
});



document.getElementById('google-signin').addEventListener('click', (e) => {
    e.preventDefault();
    handleSocialSignIn(googleProvider, 'Google');
});

document.getElementById('google-signup').addEventListener('click', (e) => {
    e.preventDefault();
    handleSocialSignUp(googleProvider, 'Google');
});


document.getElementById('facebook-signin').addEventListener('click', (e) => {
    e.preventDefault();
    handleSocialSignIn(facebookProvider, 'Facebook');
});

document.getElementById('facebook-signup').addEventListener('click', (e) => {
    e.preventDefault();
    handleSocialSignUp(facebookProvider, 'Facebook');
});


document.getElementById('linkedin-signin').addEventListener('click', (e) => {
    e.preventDefault();
    handleSocialSignIn(linkedinProvider, 'LinkedIn');
});

document.getElementById('linkedin-signup').addEventListener('click', (e) => {
    e.preventDefault();
    handleSocialSignUp(linkedinProvider, 'LinkedIn');
});


function handleSocialSignIn(provider, providerName) {
    signInWithPopup(auth, provider)
        .then((result) => {
            const user = result.user;
            

            showMessage(`${providerName} sign-in successful!`, "success");
            setTimeout(() => {
                window.location.href = "user_profile_loged_in.html";
            }, 1500);
        })
        .catch((error) => {
            console.error(`${providerName} sign-in error:`, error);
            showMessage(error.message, "error");
        });
}


function handleSocialSignUp(provider, providerName) {
    signInWithPopup(auth, provider)
        .then((result) => {
            const user = result.user;
            

            return get(child(ref(db), `users/${user.uid}`)).then((snapshot) => {
                if (!snapshot.exists()) {
                    // Only create DB entry if user doesn't exist
                    return set(ref(db, 'users/' + user.uid), {
                        username: user.displayName || 'User',
                        email: user.email,
                        createdAt: Date.now(),
                        emailVerified: true // Social providers verify emails automatically
                    });
                }
                return Promise.resolve();
            });
        })
        .then(() => {
            showMessage(`${providerName} sign-up successful!`, "success");
            setTimeout(() => {
                window.location.href = "user_profile_loged_in.html";
            }, 150);
        })
        .catch((error) => {
            console.error(`${providerName} sign-up error:`, error);
            showMessage(error.message, "error");
        });
}


function resendVerificationEmail() {
    const email = document.getElementById('login_email').value;
    if (!email) {
        showMessage("Please enter your email address first", "error");
        return;
    }
    

    signInWithEmailAndPassword(auth, email, document.getElementById('login_password').value)
        .then((userCredential) => {
            const user = userCredential.user;
            return sendEmailVerification(user);
        })
        .then(() => {
            // Sign out after sending verification
            return signOut(auth);
        })
        .then(() => {
            showMessage("Verification email sent! Please check your inbox.", "success");
        })
        .catch((error) => {
            console.error("Verification email error:", error);
            if (error.code === 'auth/wrong-password' || error.code === 'auth/user-not-found') {
                showMessage("Please enter correct email and password to resend verification", "error");
            } else {
                showMessage(error.message, "error");
            }
        });
}


resendVerificationBtn.addEventListener('click', (e) => {
    e.preventDefault();
    resendVerificationEmail();
});



forgotPasswordLink.addEventListener('click', () => {
    forgotPasswordModal.style.display = 'block';
});

closeModalBtn.addEventListener('click', () => {
    forgotPasswordModal.style.display = 'none';
});

window.addEventListener('click', (event) => {
    if (event.target === forgotPasswordModal) {
        forgotPasswordModal.style.display = 'none';
    }
});



document.getElementById('resetPasswordForm').addEventListener('submit', (e) => {
    e.preventDefault();
    
    const email = document.getElementById('reset_email').value;
    
    sendPasswordResetEmail(auth, email)
        .then(() => {
            showMessage("Password reset email sent! Check your inbox.", "success");
            forgotPasswordModal.style.display = 'none';
            document.getElementById('resetPasswordForm').reset();
        })
        .catch((error) => {
            console.error("Password reset error:", error);
            showMessage(error.message, "error");
        });
});
    </script>
</body>
</html>