<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shortcut Sensei - Community</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    <style>
        /* Base styles */
        :root {
            --primary: #800080;
            --primary-dark: #6a1b9a;
            --primary-light: #f0e6f5;
            --secondary: #444;
            --light-gray: #f4f4f4;
            --dark-gray: #333;
            --text: #333;
            --text-light: #666;
            --white: #fff;
            --shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            --shadow-hover: 0 5px 15px rgba(0, 0, 0, 0.15);
            --border-radius: 8px;
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: var(--text);
            background-color: var(--light-gray);
        }

        /* Header styles */
        header {
            background-color: #000000;
            color: var(--white);
            padding: 15px 0;
            box-shadow: var(--shadow);
        }

        .container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 90%;
            max-width: 1200px;
            margin: 0 auto;
        }

        .logo a {
            color: var(--white);
            text-decoration: none;
            font-size: 1.8em;
            font-weight: bold;
        }

        .main-nav ul {
            list-style-type: none;
            display: flex;
            gap: 20px;
        }

        .main-nav ul li a {
            color: var(--white);
            text-decoration: none;
            padding: 10px 15px;
            display: block;
            transition: var(--transition);
        }

        .main-nav ul li a:hover {
            background-color: var(--secondary);
            border-radius: 4px;
        }

        .menu-toggle {
            display: none;
            font-size: 1.8em;
            cursor: pointer;
            color: var(--white);
        }

        /* Main content styles */
        main {
            max-width: 1200px;
            margin: 30px auto;
            padding: 0 20px;
        }

        .page-title {
            text-align: center;
            margin-bottom: 40px;
        }

        .page-title h1 {
            font-size: 2.5em;
            color: var(--primary);
            margin-bottom: 10px;
        }

        .page-title p {
            font-size: 1.2em;
            color: var(--text-light);
        }

        /* Community Stats */
        .community-stats {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 50px;
        }

        .stat-card {
            background-color: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 20px;
            text-align: center;
            flex: 1;
            min-width: 200px;
            transition: var(--transition);
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-hover);
        }

        .stat-card i {
            font-size: 2.5em;
            color: var(--primary);
            margin-bottom: 15px;
        }

        .stat-number {
            display: block;
            font-size: 2em;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            color: var(--text-light);
            font-size: 1em;
        }

        /* Community content */
        .community-content {
            display: flex;
            gap: 30px;
            margin-bottom: 50px;
        }

        .question-form-container {
            flex: 1;
            background-color: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 25px;
        }

        .question-list-container {
            flex: 2;
        }

        /* Question form */
        .question-form-heading {
            margin-bottom: 20px;
            font-size: 1.5em;
            color: var(--primary);
            border-bottom: 2px solid var(--primary-light);
            padding-bottom: 10px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: var(--text);
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: var(--border-radius);
            font-size: 1em;
            transition: var(--transition);
        }

        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(128, 0, 128, 0.2);
        }

        .form-group textarea {
            min-height: 150px;
            resize: vertical;
        }

        .form-submit {
            background-color: var(--primary);
            color: var(--white);
            border: none;
            padding: 12px 20px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1em;
            font-weight: bold;
            transition: var(--transition);
            display: block;
            width: 100%;
        }

        .form-submit:hover {
            background-color: var(--primary-dark);
        }

        /* Question filters */
        .question-filters {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            background-color: var(--white);
            border-radius: var(--border-radius);
            padding: 15px 20px;
            box-shadow: var(--shadow);
        }

        .filter-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .filter-label {
            font-weight: bold;
            color: var(--text);
        }

        .filter-select {
            padding: 8px 15px;
            border: 1px solid #ddd;
            border-radius: 20px;
            font-size: 0.9em;
            cursor: pointer;
        }

        .search-bar {
            display: flex;
            gap: 10px;
        }

        .search-input {
            padding: 8px 15px;
            border: 1px solid #ddd;
            border-radius: 20px;
            font-size: 0.9em;
            min-width: 200px;
        }

        .search-btn {
            background-color: var(--primary);
            color: var(--white);
            border: none;
            border-radius: 20px;
            padding: 8px 15px;
            cursor: pointer;
            transition: var(--transition);
        }

        .search-btn:hover {
            background-color: var(--primary-dark);
        }

        /* Question list */
        .question-list {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .question-card {
            background-color: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 20px;
            transition: var(--transition);
        }

        .question-card:hover {
            box-shadow: var(--shadow-hover);
        }

        .question-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 15px;
        }

        .question-title {
            font-size: 1.3em;
            color: var(--primary);
            margin-bottom: 10px;
        }

        .question-meta {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
            font-size: 0.9em;
            color: var(--text-light);
        }

        .question-meta-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .question-content {
            margin-bottom: 20px;
            line-height: 1.7;
        }

        .question-categories {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }

        .category-tag {
            background-color: var(--primary-light);
            color: var(--primary);
            padding: 5px 12px;
            border-radius: 15px;
            font-size: 0.8em;
            font-weight: bold;
        }

        .question-actions {
            display: flex;
            gap: 15px;
            font-size: 0.9em;
        }

        .question-action-btn {
            display: flex;
            align-items: center;
            gap: 5px;
            color: var(--text-light);
            background: none;
            border: none;
            cursor: pointer;
            padding: 5px 10px;
            border-radius: 15px;
            transition: var(--transition);
        }

        .question-action-btn:hover {
            background-color: var(--light-gray);
            color: var(--primary);
        }

        .question-action-btn.liked {
            color: #e53935;
        }

        .question-action-btn.bookmarked {
            color: #ffc107;
        }

        /* Answer section */
        .answer-section {
            margin-top: 20px;
            border-top: 1px solid #eee;
            padding-top: 20px;
        }

        .answer-count {
            font-weight: bold;
            margin-bottom: 15px;
            color: var(--text);
        }

        .answer-list {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .answer-card {
            background-color: var(--primary-light);
            border-radius: var(--border-radius);
            padding: 15px;
            margin-left: 20px;
        }

        .answer-meta {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 10px;
            font-size: 0.9em;
            color: var(--text-light);
        }

        .answer-content {
            line-height: 1.7;
            margin-bottom: 15px;
        }

        .answer-actions {
            display: flex;
            gap: 15px;
            font-size: 0.9em;
        }

        .answer-form {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px dashed #ddd;
        }

        .answer-form-title {
            margin-bottom: 15px;
            font-size: 1.2em;
            color: var(--primary);
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            gap: 5px;
            margin-top: 30px;
        }

        .pagination-btn {
            display: inline-block;
            padding: 8px 15px;
            background-color: var(--white);
            border: 1px solid #ddd;
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: var(--transition);
        }

        .pagination-btn:hover,
        .pagination-btn.active {
            background-color: var(--primary);
            color: var(--white);
            border-color: var(--primary);
        }

        /* User avatar */
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--primary);
            color: var(--white);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.2em;
            margin-right: 10px;
        }

        .user-name {
            font-weight: bold;
            color: var(--primary);
        }

        /* Footer styles */
        footer {
            background-color: #000000;
            color: var(--white);
            padding: 30px 0;
            text-align: center;
            margin-top: 50px;
        }

        .footer-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .footer-links {
            list-style-type: none;
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .footer-links li a {
            color: var(--white);
            text-decoration: none;
        }

        .footer-links li a:hover {
            text-decoration: underline;
        }

        .social-icons {
            list-style-type: none;
            display: flex;
            gap: 20px;
        }

        .social-icons li a {
            color: var(--white);
            font-size: 1.5em;
            transition: var(--transition);
        }

        .social-icons li a:hover {
            color: var(--primary);
        }

        /* Responsive styles */
        @media (max-width: 992px) {
            .community-content {
                flex-direction: column;
            }

            .question-form-container, 
            .question-list-container {
                width: 100%;
            }
        }

        @media (max-width: 768px) {
            .container {
                flex-wrap: wrap;
            }

            .menu-toggle {
                display: block;
                order: 1;
            }
            
            .main-nav {
                order: 3;
                width: 100%;
            }
            
            .main-nav ul {
                display: none;
                flex-direction: column;
                width: 100%;
                background-color: #000;
                position: absolute;
                top: 100%;
                left: 0;
                padding: 10px 0;
                z-index: 100;
            }
            
            .main-nav ul.show {
                display: flex;
            }
            
            .main-nav ul li {
                width: 100%;
            }
            
            .main-nav ul li a {
                padding: 15px;
                width: 100%;
                text-align: center;
            }

            .question-filters {
                flex-direction: column;
                gap: 15px;
                align-items: flex-start;
            }

            .filter-group {
                width: 100%;
                justify-content: space-between;
            }

            .search-bar {
                width: 100%;
            }

            .search-input {
                flex: 1;
            }

            .question-meta,
            .answer-meta {
                flex-wrap: wrap;
            }
        }

        /* Animation effects */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .question-card, .answer-card {
            animation: fadeIn 0.5s ease-out;
        }

        /* Toggle answer form */
        .answer-form-toggle {
            background-color: var(--primary-light);
            color: var(--primary);
            border: 1px solid var(--primary);
            padding: 8px 15px;
            border-radius: 20px;
            cursor: pointer;
            font-weight: bold;
            transition: var(--transition);
            margin-top: 15px;
        }

        .answer-form-toggle:hover {
            background-color: var(--primary);
            color: var(--white);
        }

        .answer-form-container {
            display: none;
            margin-top: 15px;
        }

        .answer-form-container.show {
            display: block;
            animation: fadeIn 0.5s ease-out;
        }

        /* Reply section */
        .reply-section {
            margin-top: 15px;
            padding-left: 20px;
            border-left: 2px solid #ddd;
        }

        .reply-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .reply-card {
            background-color: var(--white);
            border-radius: var(--border-radius);
            padding: 12px;
        }

        .reply-meta {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 8px;
            font-size: 0.85em;
            color: var(--text-light);
        }

        .reply-content {
            line-height: 1.6;
            font-size: 0.95em;
        }

        /* Badges */
        .user-badge {
            display: inline-block;
            font-size: 0.75em;
            background-color: #f0f0f0;
            color: var(--text);
            padding: 2px 8px;
            border-radius: 10px;
            margin-left: 5px;
        }

        .user-badge.admin {
            background-color: #ff9800;
            color: white;
        }

        .user-badge.moderator {
            background-color: #4caf50;
            color: white;
        }

        .user-badge.top-contributor {
            background-color: #2196f3;
            color: white;
        }

        /* Best answer styling */
        .best-answer {
            border: 2px solid #4caf50;
            position: relative;
        }

        .best-answer::before {
            content: "Best Answer";
            position: absolute;
            top: -12px;
            right: 20px;
            background-color: #4caf50;
            color: white;
            padding: 3px 10px;
            border-radius: 10px;
            font-size: 0.8em;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <div class="logo">
                <a href="Homepage_sign_up.html">Shortcut Sensei</a>
            </div>
            <div class="menu-toggle">
                <i class="fa-solid fa-bars"></i>
            </div>
            <nav class="main-nav">
                <ul>
                    <li><a href="Homepage_sign_up.html">Home</a></li>
                    <li><a href="#news">Blogs</a></li>
                    <li><a href="#features">Features</a></li>
                    <li><a href="#testimonials">Testimonials</a></li>
                    <li><a href="About.html">About</a></li>
                    <li><a href="login_page.htm">Sign up</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main>
        <div class="page-title">
            <h1>Shortcut Sensei Community</h1>
            <p>Ask questions, share your knowledge, and connect with keyboard shortcut enthusiasts</p>
        </div>

        <div class="community-stats">
            <div class="stat-card">
                <i class="fas fa-users"></i>
                <span class="stat-number">5,782</span>
                <span class="stat-label">Community Members</span>
            </div>
            <div class="stat-card">
                <i class="fas fa-question-circle"></i>
                <span class="stat-number">2,456</span>
                <span class="stat-label">Questions Asked</span>
            </div>
            <div class="stat-card">
                <i class="fas fa-comment-dots"></i>
                <span class="stat-number">12,890</span>
                <span class="stat-label">Helpful Answers</span>
            </div>
            <div class="stat-card">
                <i class="fas fa-keyboard"></i>
                <span class="stat-number">1,450</span>
                <span class="stat-label">Shortcuts Shared</span>
            </div>
        </div>

        <div class="community-content">
            <div class="question-form-container">
                <h2 class="question-form-heading">Ask a Question</h2>
                <form id="questionForm">
                    <div class="form-group">
                        <label for="questionTitle">Question Title</label>
                        <input type="text" id="questionTitle" placeholder="What's your question about?" required>
                    </div>
                    <div class="form-group">
                        <label for="questionDetails">Question Details</label>
                        <textarea id="questionDetails" placeholder="Provide details about your question..." required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="questionCategory">Category</label>
                        <select id="questionCategory" required>
                            <option value="">Select a category</option>
                            <option value="windows">Windows</option>
                            <option value="macos">macOS</option>
                            <option value="linux">Linux</option>
                            <option value="office">Microsoft Office</option>
                            <option value="adobe">Adobe Creative Suite</option>
                            <option value="browser">Web Browsers</option>
                            <option value="ide">Development IDEs</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="questionTags">Tags (comma separated)</label>
                        <input type="text" id="questionTags" placeholder="e.g., excel, formulas, navigation">
                    </div>
                    <button type="submit" class="form-submit">Post Question</button>
                </form>
            </div>

            <div class="question-list-container">
                <div class="question-filters">
                    <div class="filter-group">
                        <span class="filter-label">Sort by:</span>
                        <select class="filter-select" id="sortQuestions">
                            <option value="newest">Newest</option>
                            <option value="active">Most Active</option>
                            <option value="votes">Most Votes</option>
                            <option value="unanswered">Unanswered</option>
                        </select>
                    </div>
                    <div class="search-bar">
                        <input type="text" class="search-input" placeholder="Search questions...">
                        <button class="search-btn"><i class="fas fa-search"></i></button>
                    </div>
                </div>

                <div class="question-list">
                    <!-- Sample Question 1 -->
                    <div class="question-card">
                        <div class="question-header">
                            <h3 class="question-title">What's the quickest way to navigate between applications in Windows?</h3>
                        </div>
                        <div class="question-meta">
                            <div class="question-meta-item">
                               <div class="user-avatar">JD</div>
                               <span class="user-name">John Doe</span>
                               <span class="user-badge top-contributor">Top Contributor</span>
                            </div>
                            <div class="question-meta-item">
                                <i class="far fa-clock"></i>
                                <span>March 22, 2025</span>
                            </div>
                            <div class="question-meta-item">
                                <i class="far fa-eye"></i>
                                <span>1,245 views</span>
                            </div>
                        </div>
                        <div class="question-content">
                            <p>I'm trying to find the most efficient way to switch between multiple applications in Windows. I know about Alt+Tab, but I'm wondering if there are better methods when you have many windows open at once. Any tips or advanced shortcuts would be appreciated.</p>
                        </div>
                        <div class="question-categories">
                            <span class="category-tag">Windows</span>
                            <span class="category-tag">Productivity</span>
                            <span class="category-tag">Navigation</span>
                        </div>
                        <div class="question-actions">
                            <button class="question-action-btn">
                                <i class="far fa-thumbs-up"></i>
                                <span>42 Likes</span>
                            </button>
                            <button class="question-action-btn">
                                <i class="far fa-comment"></i>
                                <span>8 Answers</span>
                            </button>
                            <button class="question-action-btn">
                                <i class="far fa-bookmark"></i>
                                <span>Save</span>
                            </button>
                            <button class="question-action-btn">
                                <i class="fas fa-share"></i>
                                <span>Share</span>
                            </button>
                        </div>

                        <div class="answer-section">
                            <h4 class="answer-count">8 Answers</h4>
                            <div class="answer-list">
                                <div class="answer-card best-answer">
                                    <div class="answer-meta">
                                        <div class="user-avatar">MS</div>
                                        <span class="user-name">Mark Smith</span>
                                        <span class="user-badge moderator">Moderator</span>
                                        <div class="question-meta-item">
                                            <i class="far fa-clock"></i>
                                            <span>March 22, 2025</span>
                                        </div>
                                    </div>
                                    <div class="answer-content">
                                        <p>Beyond the basic Alt+Tab, here are more powerful options:</p>
                                        <p>1. <strong>Windows+Tab</strong>: Opens Task View, which provides a persistent view of all your open apps.</p>
                                        <p>2. <strong>Alt+Tab (hold Alt)</strong>: Shows all windows, then press Tab repeatedly to cycle through them.</p>
                                        <p>3. <strong>Windows+Number</strong>: Switch to the app pinned in that position on your taskbar (1 for first app, 2 for second, etc.)</p>
                                        <p>4. <strong>Ctrl+Windows+Left/Right Arrow</strong>: Switch between virtual desktops.</p>
                                        <p>5. <strong>Alt+Esc</strong>: Cycle through windows in the order they were opened.</p>
                                        <p>My personal favorite is Windows+Number because it's the most precise when you have a consistent workspace setup.</p>
                                    </div>
                                    <div class="answer-actions">
                                        <button class="question-action-btn liked">
                                            <i class="fas fa-thumbs-up"></i>
                                            <span>76 Likes</span>
                                        </button>
                                        <button class="question-action-btn">
                                            <i class="far fa-comment"></i>
                                            <span>Reply</span>
                                        </button>
                                    </div>

                                    <div class="reply-section">
                                        <div class="reply-list">
                                            <div class="reply-card">
                                                <div class="reply-meta">
                                                    <div class="user-avatar">JD</div>
                                                    <span class="user-name">John Doe</span>
                                                    <span class="user-badge top-contributor">Top Contributor</span>
                                                    <div class="question-meta-item">
                                                        <i class="far fa-clock"></i>
                                                        <span>March 23, 2025</span>
                                                    </div>
                                                </div>
                                                <div class="reply-content">
                                                    <p>Thanks Mark! I didn't know about the Windows+Number shortcut. That's going to be a game-changer for me!</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="answer-card">
                                    <div class="answer-meta">
                                        <div class="user-avatar">LG</div>
                                        <span class="user-name">Laura Green</span>
                                        <div class="question-meta-item">
                                            <i class="far fa-clock"></i>
                                            <span>March 23, 2025</span>
                                        </div>
                                    </div>
                                    <div class="answer-content">
                                        <p>Another trick I use is the "Snap Assist" feature. If you press Windows+Left Arrow or Windows+Right Arrow, it will snap your current window to that side of the screen. Then you can easily select another application to fill the other half.</p>
                                        <p>For power users, I recommend trying PowerToys from Microsoft, which includes FancyZones for even more window management options.</p>
                                    </div>
                                    <div class="answer-actions">
                                        <button class="question-action-btn">
                                            <i class="far fa-thumbs-up"></i>
                                            <span>24 Likes</span>
                                        </button>
                                        <button class="question-action-btn">
                                            <i class="far fa-comment"></i>
                                            <span>Reply</span>
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <button class="answer-form-toggle">Add Your Answer</button>
                            <div class="answer-form-container">
                                <h4 class="answer-form-title">Your Answer</h4>
                                <form class="answer-form">
                                    <div class="form-group">
                                        <textarea id="answerContent" placeholder="Write your answer here..." required></textarea>
                                    </div>
                                    <button type="submit" class="form-submit">Post Answer</button>
                                </form>
                            </div>
                        </div>
                    </div>

                    <!-- Sample Question 2 -->
                    <div class="question-card">
                        <div class="question-header">
                            <h3 class="question-title">Best shortcuts for text editing in Visual Studio Code?</h3>
                        </div>
                        <div class="question-meta">
                            <div class="question-meta-item">
                               <div class="user-avatar">AK</div>
                               <span class="user-name">Alice Kim</span>
                            </div>
                            <div class="question-meta-item">
                                <i class="far fa-clock"></i>
                                <span>March 20, 2025</span>
                            </div>
                            <div class="question-meta-item">
                                <i class="far fa-eye"></i>
                                <span>876 views</span>
                            </div>
                        </div>
                        <div class="question-content">
                            <p>I recently switched to VS Code and I'm looking for the most useful keyboard shortcuts for text editing and manipulation. I'm specifically interested in multi-cursor editing, code formatting, and navigation. What are your favorite productivity-boosting shortcuts?</p>
                        </div>
                        <div class="question-categories">
                            <span class="category-tag">IDE</span>
                            <span class="category-tag">VS Code</span>
                            <span class="category-tag">Coding</span>
                        </div>
                        <div class="question-actions">
                            <button class="question-action-btn">
                                <i class="far fa-thumbs-up"></i>
                                <span>38 Likes</span>
                            </button>
                            <button class="question-action-btn">
                                <i class="far fa-comment"></i>
                                <span>5 Answers</span>
                            </button>
                            <button class="question-action-btn">
                                <i class="far fa-bookmark"></i>
                                <span>Save</span>
                            </button>
                            <button class="question-action-btn">
                                <i class="fas fa-share"></i>
                                <span>Share</span>
                            </button>
                        </div>

                        <div class="answer-section">
                            <h4 class="answer-count">5 Answers</h4>
                            <button class="answer-form-toggle">Add Your Answer</button>
                            <div class="answer-form-container">
                                <h4 class="answer-form-title">Your Answer</h4>
                                <form class="answer-form">
                                    <div class="form-group">
                                        <textarea id="answerContent2" placeholder="Write your answer here..." required></textarea>
                                    </div>
                                    <button type="submit" class="form-submit">Post Answer</button>
                                </form>
                            </div>
                        </div>
                    </div>

                    <!-- Sample Question 3 -->
                    <div class="question-card">
                        <div class="question-header">
                            <h3 class="question-title">Adobe Photoshop: Most essential shortcuts for photo manipulation?</h3>
                        </div>
                        <div class="question-meta">
                            <div class="question-meta-item">
                               <div class="user-avatar">RP</div>
                               <span class="user-name">Robert Parker</span>
                            </div>
                            <div class="question-meta-item">
                                <i class="far fa-clock"></i>
                                <span>March 18, 2025</span>
                            </div>
                            <div class="question-meta-item">
                                <i class="far fa-eye"></i>
                                <span>1,032 views</span>
                            </div>
                        </div>
                        <div class="question-content">
                            <p>I'm a photography student looking to improve my workflow in Photoshop. What are the most essential keyboard shortcuts that professional photographers use for efficient photo editing and manipulation? I'm particularly interested in shortcuts for adjustments, selections, and layer management.</p>
                        </div>
                        <div class="question-categories">
                            <span class="category-tag">Adobe</span>
                            <span class="category-tag">Photoshop</span>
                            <span class="category-tag">Photography</span>
                        </div>
                        <div class="question-actions">
                            <button class="question-action-btn">
                                <i class="far fa-thumbs-up"></i>
                                <span>54 Likes</span>
                            </button>
                            <button class="question-action-btn">
                                <i class="far fa-comment"></i>
                                <span>12 Answers</span>
                            </button>
                            <button class="question-action-btn bookmarked">
                                <i class="fas fa-bookmark"></i>
                                <span>Saved</span>
                            </button>
                            <button class="question-action-btn">
                                <i class="fas fa-share"></i>
                                <span>Share</span>
                            </button>
                        </div>

                        <div class="answer-section">
                            <h4 class="answer-count">12 Answers</h4>
                            <button class="answer-form-toggle">Add Your Answer</button>
                            <div class="answer-form-container">
                                <h4 class="answer-form-title">Your Answer</h4>
                                <form class="answer-form">
                                    <div class="form-group">
                                        <textarea id="answerContent3" placeholder="Write your answer here..." required></textarea>
                                    </div>
                                    <button type="submit" class="form-submit">Post Answer</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="pagination">
                    <a href="#" class="pagination-btn active">1</a>
                    <a href="#" class="pagination-btn">2</a>
                    <a href="#" class="pagination-btn">3</a>
                    <a href="#" class="pagination-btn">4</a>
                    <a href="#" class="pagination-btn">5</a>
                    <a href="#" class="pagination-btn"><i class="fas fa-chevron-right"></i></a>
                </div>
            </div>
        </div>
    </main>

    <footer>
        <div class="footer-content">
            <div class="logo">
                <a href="Homepage_sign_up.html">Shortcut Sensei</a>
            </div>
            <ul class="footer-links">
                <li><a href="Homepage_sign_up.html">Home</a></li>
                <li><a href="#news">Blogs</a></li>
                <li><a href="#features">Features</a></li>
                <li><a href="#testimonials">Testimonials</a></li>
                <li><a href="About.html">About</a></li>
                <li><a href="login_page.htm">Sign up</a></li>
                <li><a href="#">Privacy Policy</a></li>
                <li><a href="#">Terms of Service</a></li>
            </ul>
            <ul class="social-icons">
                <li><a href="#"><i class="fab fa-facebook"></i></a></li>
                <li><a href="#"><i class="fab fa-twitter"></i></a></li>
                <li><a href="#"><i class="fab fa-instagram"></i></a></li>
                <li><a href="#"><i class="fab fa-youtube"></i></a></li>
                <li><a href="#"><i class="fab fa-linkedin"></i></a></li>
            </ul>
            <p>&copy; 2025 Shortcut Sensei. All rights reserved.</p>
        </div>
    </footer>

    <script>
        // // Toggle mobile menu
        // const menuToggle = document.querySelector('.menu-toggle');
        // const mainNav = document.querySelector('.main-nav ul');
        
        // menuToggle.addEventListener('click', () => {
        //     mainNav.classList.toggle('show');
        // });

        // // Toggle answer form
        // const answerFormToggles = document.querySelectorAll('.answer-form-toggle');
        // answerFormToggles.forEach(toggle => {
        //     toggle.addEventListener('click', function() {
        //         const formContainer = this.nextElementSibling;
        //         formContainer.classList.toggle('show');
        //         this.textContent = formContainer.classList.contains('show') ? 'Cancel' : 'Add Your Answer';
        //     });
        // });

        // // Form submission (just for demo purposes)
        // const questionForm = document.getElementById('questionForm');
        // if (questionForm) {
        //     questionForm.addEventListener('submit', function(e) {
        //         e.preventDefault();
        //         alert('Your question has been submitted! This is a demo, so no actual submission occurs.');
        //         this.reset();
        //     });
        // }

        // const answerForms = document.querySelectorAll('.answer-form');
        // answerForms.forEach(form => {
        //     form.addEventListener('submit', function(e) {
        //         e.preventDefault();
        //         alert('Your answer has been submitted! This is a demo, so no actual submission occurs.');
        //         this.reset();
        //         // Find and hide the parent form container
        //         const formContainer = this.closest('.answer-form-container');
        //         formContainer.classList.remove('show');
        //         // Update the toggle button text
        //         const toggleButton = formContainer.previousElementSibling;
        //         toggleButton.textContent = 'Add Your Answer';
        //     });
        // });

        // // Like functionality (just for demo)
        // const actionButtons = document.querySelectorAll('.question-action-btn');
        // actionButtons.forEach(button => {
        //     if (!button.classList.contains('liked') && !button.classList.contains('bookmarked')) {
        //         button.addEventListener('click', function() {
        //             if (this.querySelector('i').classList.contains('fa-thumbs-up')) {
        //                 this.classList.toggle('liked');
        //                 const likeCount = parseInt(this.querySelector('span').textContent);
        //                 if (this.classList.contains('liked')) {
        //                     this.querySelector('i').classList.replace('far', 'fas');
        //                     this.querySelector('span').textContent = `${likeCount + 1} Likes`;
        //                 } else {
        //                     this.querySelector('i').classList.replace('fas', 'far');
        //                     this.querySelector('span').textContent = `${likeCount - 1} Likes`;
        //                 }
        //             } else if (this.querySelector('i').classList.contains('fa-bookmark')) {
        //                 this.classList.toggle('bookmarked');
        //                 if (this.classList.contains('bookmarked')) {
        //                     this.querySelector('i').classList.replace('far', 'fas');
        //                     this.querySelector('span').textContent = 'Saved';
        //                 } else {
        //                     this.querySelector('i').classList.replace('fas', 'far');
        //                     this.querySelector('span').textContent = 'Save';
        //                 }
        //             }
        //         });
        //     }
        // });




        // Your web app's Firebase configuration
        const firebaseConfig = {
  apiKey: "AIzaSyDtm8Jyamx0TmLEqrwbwUhTybqOKzDyCAo",
  authDomain: "shortcut-sensei-community.firebaseapp.com",
  projectId: "shortcut-sensei-community",
  storageBucket: "shortcut-sensei-community.firebasestorage.app",
  messagingSenderId: "117549923966",
  appId: "1:117549923966:web:a220954fda4337a303e22f",
  measurementId: "G-MTJWP6HGL6"
};

  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  const db = firebase.firestore();
  const auth = firebase.auth();

  function setupAuthListeners() {
  // Display different UI elements based on auth status
  firebase.auth().onAuthStateChanged(user => {
    const authElements = document.querySelectorAll('.auth-dependent');
    const nonAuthElements = document.querySelectorAll('.non-auth-dependent');
    
    if (user) {
      // User is signed in
      console.log('User is signed in:', user.displayName);
      authElements.forEach(el => el.style.display = 'block');
      nonAuthElements.forEach(el => el.style.display = 'none');
      
      // Update user avatar and name if available
      const userAvatars = document.querySelectorAll('.current-user-avatar');
      const userNames = document.querySelectorAll('.current-user-name');
      
      userAvatars.forEach(avatar => {
        if (user.photoURL) {
          avatar.innerHTML = `<img src="${user.photoURL}" alt="${user.displayName}">`;
        } else {
          // Use initials if no photo available
          const initials = user.displayName ? getInitials(user.displayName) : 'U';
          avatar.textContent = initials;
        }
      });
      
      userNames.forEach(name => {
        name.textContent = user.displayName || user.email;
      });
      
      // Store user data if first login
      saveUserData(user);
    } else {
      // User is signed out
      console.log('User is signed out');
      authElements.forEach(el => el.style.display = 'none');
      nonAuthElements.forEach(el => el.style.display = 'block');
    }
  });
}

function getInitials(name) {
  return name
    .split(' ')
    .map(word => word[0])
    .join('')
    .toUpperCase()
    .substring(0, 2);
}

function saveUserData(user) {
  const userRef = db.collection('users').doc(user.uid);
  
  // Check if user exists before writing
  userRef.get().then(doc => {
    if (!doc.exists) {
      userRef.set({
        displayName: user.displayName || '',
        email: user.email,
        photoURL: user.photoURL || '',
        createdAt: firebase.firestore.FieldValue.serverTimestamp(),
        reputation: 0,
        badges: []
      });
    }
  });
}

// 4. Question Management
function fetchQuestions(sortBy = 'newest', limit = 10) {
  let query = db.collection('questions');
  
  switch(sortBy) {
    case 'newest':
      query = query.orderBy('createdAt', 'desc');
      break;
    case 'active':
      query = query.orderBy('updatedAt', 'desc');
      break;
    case 'votes':
      query = query.orderBy('likeCount', 'desc');
      break;
    case 'unanswered':
      query = query.where('isResolved', '==', false);
      break;
  }
  
  return query.limit(limit).get().then(snapshot => {
    const questions = [];
    snapshot.forEach(doc => {
      const data = doc.data();
      questions.push({
        id: doc.id,
        ...data
      });
    });
    return questions;
  });
}

function renderQuestions(questions) {
  const questionListElement = document.querySelector('.question-list');
  questionListElement.innerHTML = '';
  
  questions.forEach(question => {
    // Fetch author info
    db.collection('users').doc(question.userId).get().then(userDoc => {
      const user = userDoc.data() || {displayName: 'Anonymous'};
      
      // Calculate time ago
      const timeAgo = formatTimeAgo(question.createdAt?.toDate());
      
      // Create question card HTML
      const questionCard = document.createElement('div');
      questionCard.className = 'question-card';
      questionCard.dataset.id = question.id;
      
      // Format tags
      const tagHtml = question.tags.map(tag => 
        `<span class="category-tag">${tag}</span>`
      ).join('');
      
      questionCard.innerHTML = `
        <div class="question-header">
          <h3 class="question-title"><a href="question.html?id=${question.id}">${question.title}</a></h3>
        </div>
        <div class="question-meta">
          <div class="question-meta-item">
             <div class="user-avatar">${getInitials(user.displayName)}</div>
             <span class="user-name">${user.displayName}</span>
             ${user.badges?.length ? `<span class="user-badge ${user.badges[0]}">${user.badges[0]}</span>` : ''}
          </div>
          <div class="question-meta-item">
              <i class="far fa-clock"></i>
              <span>${timeAgo}</span>
          </div>
          <div class="question-meta-item">
              <i class="far fa-eye"></i>
              <span>${question.viewCount || 0} views</span>
          </div>
        </div>
        <div class="question-content">
          <p>${truncateText(question.content, 200)}</p>
        </div>
        <div class="question-categories">
          ${tagHtml}
          <span class="category-tag">${question.category}</span>
        </div>
        <div class="question-actions">
          <button class="question-action-btn" onclick="likeQuestion('${question.id}')">
              <i class="far fa-thumbs-up"></i>
              <span>${question.likeCount || 0} Likes</span>
          </button>
          <button class="question-action-btn">
              <i class="far fa-comment"></i>
              <span>${question.answerCount || 0} Answers</span>
          </button>
          <button class="question-action-btn" onclick="saveQuestion('${question.id}')">
              <i class="far fa-bookmark"></i>
              <span>Save</span>
          </button>
          <button class="question-action-btn" onclick="shareQuestion('${question.id}')">
              <i class="fas fa-share"></i>
              <span>Share</span>
          </button>
        </div>
      `;
      
      questionListElement.appendChild(questionCard);
    });
  });
}

function truncateText(text, maxLength) {
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength) + '...';
}

function formatTimeAgo(date) {
  if (!date) return 'Unknown date';
  
  const seconds = Math.floor((new Date() - date) / 1000);
  
  let interval = seconds / 31536000;
  if (interval > 1) return Math.floor(interval) + ' years ago';
  
  interval = seconds / 2592000;
  if (interval > 1) return Math.floor(interval) + ' months ago';
  
  interval = seconds / 86400;
  if (interval > 1) return Math.floor(interval) + ' days ago';
  
  interval = seconds / 3600;
  if (interval > 1) return Math.floor(interval) + ' hours ago';
  
  interval = seconds / 60;
  if (interval > 1) return Math.floor(interval) + ' minutes ago';
  
  return Math.floor(seconds) + ' seconds ago';
}

// 5. Create new question
function createQuestion(questionData) {
  // Check if user is logged in
  const user = firebase.auth().currentUser;
  if (!user) {
    alert('Please sign in to post a question');
    return Promise.reject('User not authenticated');
  }
  
  // Prepare question data
  const newQuestion = {
    title: questionData.title,
    content: questionData.content,
    category: questionData.category,
    tags: questionData.tags.split(',').map(tag => tag.trim()).filter(tag => tag !== ''),
    userId: user.uid,
    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
    updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
    viewCount: 0,
    likeCount: 0,
    isResolved: false,
    answerCount: 0
  };
  
  // Add to Firestore
  return db.collection('questions').add(newQuestion)
    .then(docRef => {
      console.log("Question created with ID: ", docRef.id);
      return docRef.id;
    })
    .catch(error => {
      console.error("Error adding question: ", error);
      throw error;
    });
}

// 6. Get a single question with answers
function fetchQuestionWithAnswers(questionId) {
  let questionData = null;
  
  // First get the question
  return db.collection('questions').doc(questionId).get()
    .then(doc => {
      if (!doc.exists) {
        throw new Error('Question not found');
      }
      
      // Increment view count
      db.collection('questions').doc(questionId).update({
        viewCount: firebase.firestore.FieldValue.increment(1)
      });
      
      questionData = {
        id: doc.id,
        ...doc.data()
      };
      
      // Get user info
      return db.collection('users').doc(questionData.userId).get();
    })
    .then(userDoc => {
      questionData.author = userDoc.exists ? userDoc.data() : { displayName: 'Anonymous' };
      
      // Get answers
      return db.collection('answers')
        .where('questionId', '==', questionId)
        .orderBy('isBestAnswer', 'desc')
        .orderBy('likeCount', 'desc')
        .get();
    })
    .then(snapshot => {
      questionData.answers = [];
      
      // Get all answers and prepare to fetch their authors
      const authorPromises = [];
      snapshot.forEach(doc => {
        const answer = {
          id: doc.id,
          ...doc.data()
        };
        questionData.answers.push(answer);
        
        // Prepare to fetch author info
        authorPromises.push(
          db.collection('users').doc(answer.userId).get()
            .then(userDoc => {
              answer.author = userDoc.exists ? userDoc.data() : { displayName: 'Anonymous' };
            })
        );
      });
      
      // Wait for all author info to be fetched
      return Promise.all(authorPromises);
    })
    .then(() => {
      // Now fetch comments for each answer
      const commentPromises = [];
      
      // Add comments for the question
      commentPromises.push(
        fetchComments(questionId, 'question')
          .then(comments => {
            questionData.comments = comments;
          })
      );
      
      // Add comments for each answer
      questionData.answers.forEach(answer => {
        commentPromises.push(
          fetchComments(answer.id, 'answer')
            .then(comments => {
              answer.comments = comments;
            })
        );
      });
      
      return Promise.all(commentPromises);
    })
    .then(() => {
      return questionData;
    });
}

function fetchComments(parentId, parentType) {
  return db.collection('comments')
    .where('parentId', '==', parentId)
    .where('parentType', '==', parentType)
    .orderBy('createdAt')
    .get()
    .then(snapshot => {
      const comments = [];
      const authorPromises = [];
      
      snapshot.forEach(doc => {
        const comment = {
          id: doc.id,
          ...doc.data()
        };
        comments.push(comment);
        
        // Prepare to fetch author info
        authorPromises.push(
          db.collection('users').doc(comment.userId).get()
            .then(userDoc => {
              comment.author = userDoc.exists ? userDoc.data() : { displayName: 'Anonymous' };
            })
        );
      });
      
      // Wait for all author info to be fetched
      return Promise.all(authorPromises).then(() => comments);
    });
}

// 7. Create Answer
function createAnswer(questionId, content) {
  // Check if user is logged in
  const user = firebase.auth().currentUser;
  if (!user) {
    alert('Please sign in to post an answer');
    return Promise.reject('User not authenticated');
  }
  
  const newAnswer = {
    questionId: questionId,
    content: content,
    userId: user.uid,
    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
    updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
    likeCount: 0,
    isBestAnswer: false
  };
  
  return db.collection('answers').add(newAnswer)
    .then(docRef => {
      // Update answer count in the question
      db.collection('questions').doc(questionId).update({
        answerCount: firebase.firestore.FieldValue.increment(1),
        updatedAt: firebase.firestore.FieldValue.serverTimestamp()
      });
      
      return docRef.id;
    });
}

// 8. Create Comment
function createComment(parentId, parentType, content) {
  // Check if user is logged in
  const user = firebase.auth().currentUser;
  if (!user) {
    alert('Please sign in to post a comment');
    return Promise.reject('User not authenticated');
  }
  
  const newComment = {
    parentId: parentId,
    parentType: parentType,
    content: content,
    userId: user.uid,
    createdAt: firebase.firestore.FieldValue.serverTimestamp()
  };
  
  return db.collection('comments').add(newComment)
    .then(docRef => {
      // Update the parent document's timestamp
      const parentCollection = parentType === 'question' ? 'questions' : 'answers';
      db.collection(parentCollection).doc(parentId).update({
        updatedAt: firebase.firestore.FieldValue.serverTimestamp()
      });
      
      return docRef.id;
    });
}

// 9. Like Question
function likeQuestion(questionId) {
  const user = firebase.auth().currentUser;
  if (!user) {
    alert('Please sign in to like questions');
    return;
  }
  
  // Create a reference for the like
  const likeRef = db.collection('likes').doc(`${user.uid}_question_${questionId}`);
  
  // Check if already liked
  likeRef.get().then(doc => {
    if (doc.exists) {
      // Unlike: delete the like document and decrement count
      return likeRef.delete().then(() => {
        return db.collection('questions').doc(questionId).update({
          likeCount: firebase.firestore.FieldValue.increment(-1)
        });
      });
    } else {
      // Like: create the like document and increment count
      return likeRef.set({
        userId: user.uid,
        questionId: questionId,
        createdAt: firebase.firestore.FieldValue.serverTimestamp()
      }).then(() => {
        return db.collection('questions').doc(questionId).update({
          likeCount: firebase.firestore.FieldValue.increment(1)
        });
      });
    }
  }).then(() => {
    // Refresh the UI
    const likeButton = document.querySelector(`.question-card[data-id="${questionId}"] .question-action-btn:first-child`);
    if (likeButton) {
      // Toggle the liked class and update the count
      likeButton.classList.toggle('liked');
      const likeCountElement = likeButton.querySelector('span');
      const currentCount = parseInt(likeCountElement.textContent);
      likeCountElement.textContent = `${likeButton.classList.contains('liked') ? currentCount + 1 : currentCount - 1} Likes`;
      
      // Toggle the icon
      const icon = likeButton.querySelector('i');
      if (likeButton.classList.contains('liked')) {
        icon.classList.replace('far', 'fas');
      } else {
        icon.classList.replace('fas', 'far');
      }
    }
  }).catch(error => {
    console.error("Error updating like: ", error);
  });
}

// 10. Like Answer
function likeAnswer(answerId) {
  const user = firebase.auth().currentUser;
  if (!user) {
    alert('Please sign in to like answers');
    return;
  }
  
  // Create a reference for the like
  const likeRef = db.collection('likes').doc(`${user.uid}_answer_${answerId}`);
  
  // Check if already liked
  likeRef.get().then(doc => {
    if (doc.exists) {
      // Unlike: delete the like document and decrement count
      return likeRef.delete().then(() => {
        return db.collection('answers').doc(answerId).update({
          likeCount: firebase.firestore.FieldValue.increment(-1)
        });
      });
    } else {
      // Like: create the like document and increment count
      return likeRef.set({
        userId: user.uid,
        answerId: answerId,
        createdAt: firebase.firestore.FieldValue.serverTimestamp()
      }).then(() => {
        return db.collection('answers').doc(answerId).update({
          likeCount: firebase.firestore.FieldValue.increment(1)
        });
      });
    }
  }).then(() => {
    // Refresh the UI
    const likeButton = document.querySelector(`.answer-card[data-id="${answerId}"] .question-action-btn:first-child`);
    if (likeButton) {
      // Toggle the liked class and update the count
      likeButton.classList.toggle('liked');
      const likeCountElement = likeButton.querySelector('span');
      const currentCount = parseInt(likeCountElement.textContent);
      likeCountElement.textContent = `${likeButton.classList.contains('liked') ? currentCount + 1 : currentCount - 1} Likes`;
      
      // Toggle the icon
      const icon = likeButton.querySelector('i');
      if (likeButton.classList.contains('liked')) {
        icon.classList.replace('far', 'fas');
      } else {
        icon.classList.replace('fas', 'far');
      }
    }
  }).catch(error => {
    console.error("Error updating like: ", error);
  });
}

// 11. Mark as Best Answer
function markAsBestAnswer(answerId, questionId) {
  const user = firebase.auth().currentUser;
  if (!user) {
    alert('Please sign in to mark a best answer');
    return;
  }
  
  // First check if user is the question author
  db.collection('questions').doc(questionId).get()
    .then(doc => {
      if (doc.exists && doc.data().userId === user.uid) {
        // User is authorized to mark best answer
        
        // Reset any existing best answer
        db.collection('answers')
          .where('questionId', '==', questionId)
          .where('isBestAnswer', '==', true)
          .get()
          .then(snapshot => {
            const batch = db.batch();
            
            snapshot.forEach(doc => {
              batch.update(doc.ref, { isBestAnswer: false });
            });
            
            // Mark this answer as best
            batch.update(db.collection('answers').doc(answerId), { 
              isBestAnswer: true 
            });
            
            // Mark question as resolved
            batch.update(db.collection('questions').doc(questionId), { 
              isResolved: true,
              updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            });
            
            return batch.commit();
          })
          .then(() => {
            // Update UI
            refreshQuestionPage(questionId);
          });
      } else {
        alert('Only the question author can mark the best answer');
      }
    });
}

// 12. Initialize Page Functions
function initializeQuestionsPage() {
  // Set up sort selector
  const sortSelect = document.getElementById('sortQuestions');
  if (sortSelect) {
    sortSelect.addEventListener('change', function() {
      fetchQuestions(this.value).then(renderQuestions);
    });
    
    // Initial load
    fetchQuestions(sortSelect.value).then(renderQuestions);
  }
  
  // Set up question form
  const questionForm = document.getElementById('questionForm');
  if (questionForm) {
    questionForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const questionData = {
        title: this.querySelector('#questionTitle').value,
        content: this.querySelector('#questionDetails').value,
        category: this.querySelector('#questionCategory').value,
        tags: this.querySelector('#questionTags').value
      };
      
      createQuestion(questionData)
        .then(questionId => {
          alert('Question posted successfully!');
          this.reset();
          
          // Redirect to the question page
          window.location.href = `question.html?id=${questionId}`;
        })
        .catch(error => {
          alert('Error posting question: ' + error.message);
        });
    });
  }
  
  // Set up search
  const searchForm = document.querySelector('.search-bar');
  if (searchForm) {
    searchForm.addEventListener('submit', function(e) {
      e.preventDefault();
      const searchTerm = this.querySelector('.search-input').value.trim();
      
      if (searchTerm) {
        // This is a simple search implementation
        // For production, consider using Firebase extensions like Algolia
        db.collection('questions')
          .orderBy('title')
          .startAt(searchTerm)
          .endAt(searchTerm + '\uf8ff')
          .get()
          .then(snapshot => {
            const questions = [];
            snapshot.forEach(doc => {
              questions.push({
                id: doc.id,
                ...doc.data()
              });
            });
            renderQuestions(questions);
          });
      }
    });
  }
}

function initializeQuestionPage() {
  // Get question ID from URL
  const urlParams = new URLSearchParams(window.location.search);
  const questionId = urlParams.get('id');
  
  if (!questionId) {
    window.location.href = 'community.html';
    return;
  }
  
  // Fetch and render the question with answers
  fetchQuestionWithAnswers(questionId)
    .then(renderQuestionDetail)
    .catch(error => {
      console.error('Error fetching question:', error);
      alert('Question not found or error loading data');
    });
  
  // Set up answer form
  const answerForm = document.querySelector('.answer-form');
  if (answerForm) {
    answerForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const answerContent = this.querySelector('textarea').value;
      createAnswer(questionId, answerContent)
        .then(() => {
          alert('Answer posted successfully!');
          this.reset();
          
          // Refresh the page to show the new answer
          fetchQuestionWithAnswers(questionId)
            .then(renderQuestionDetail);
        })
        .catch(error => {
          alert('Error posting answer: ' + error.message);
        });
    });
  }
}

function renderQuestionDetail(questionData) {
  // Implement detailed rendering of a question with all its answers
  // This would be similar to renderQuestions but with more detail
  // and including the answers section
  
  // For brevity, this function is not fully implemented here
  console.log('Question data loaded:', questionData);
  
  // Update page title
  document.title = `${questionData.title} - Shortcut Sensei Community`;
  
  // Populate question details
  const questionContainer = document.querySelector('.question-detail');
  if (questionContainer) {
    // Render question content
    // ...
    
    // Render answers
    const answersContainer = document.querySelector('.answer-list');
    if (answersContainer && questionData.answers) {
      answersContainer.innerHTML = '';
      
      questionData.answers.forEach(answer => {
        // Create answer elements
        // ...
      });
    }
  }
}

function refreshQuestionPage(questionId) {
  fetchQuestionWithAnswers(questionId)
    .then(renderQuestionDetail)
    .catch(error => {
      console.error('Error refreshing question:', error);
    });
}

// 13. Setup Authentication UI
function setupAuthUI() {
  // Login form
  const loginForm = document.getElementById('loginForm');
  if (loginForm) {
    loginForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const email = this.querySelector('#loginEmail').value;
      const password = this.querySelector('#loginPassword').value;
      
      firebase.auth().signInWithEmailAndPassword(email, password)
        .then(() => {
          window.location.href = 'community.html';
        })
        .catch(error => {
          alert('Login error: ' + error.message);
        });
    });
  }
  
  // Register form
  const registerForm = document.getElementById('registerForm');
  if (registerForm) {
    registerForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const email = this.querySelector('#registerEmail').value;
      const password = this.querySelector('#registerPassword').value;
      const displayName = this.querySelector('#registerName').value;
      
      firebase.auth().createUserWithEmailAndPassword(email, password)
        .then(userCredential => {
          // Update profile
          return userCredential.user.updateProfile({
            displayName: displayName
          });
        })
        .then(() => {
          window.location.href = 'community.html';
        })
        .catch(error => {
          alert('Registration error: ' + error.message);
        });
    });
  }
  
  // Logout button
  const logoutBtn = document.getElementById('logoutBtn');
  if (logoutBtn) {
    logoutBtn.addEventListener('click', function() {
      firebase.auth().signOut()
        .then(() => {
          window.location.href = 'login_page.htm';
        })
        .catch(error => {
          console.error('Logout error:', error);
        });
    });
  }
}

// 14. Initialize Firebase and page
document.addEventListener('DOMContentLoaded', function() {
  // Initialize Firebase authentication UI
  setupAuthUI();
  
  // Set up auth state listeners
  setupAuthListeners();
  
  // Determine which page we're on and initialize accordingly
  if (window.location.pathname.includes('community.html')) {
    initializeQuestionsPage();
  } else if (window.location.pathname.includes('question.html')) {
    initializeQuestionPage();
  }
  
  // Set up mobile menu toggle
  const menuToggle = document.querySelector('.menu-toggle');
  const mainNav = document.querySelector('.main-nav ul');
  
  if (menuToggle && mainNav) {
    menuToggle.addEventListener('click', () => {
      mainNav.classList.toggle('show');
    });
  }
  
  // Other common initialization
  const answerFormToggles = document.querySelectorAll('.answer-form-toggle');
  answerFormToggles.forEach(toggle => {
    toggle.addEventListener('click', function() {
      const formContainer = this.nextElementSibling;
      formContainer.classList.toggle('show');
      this.textContent = formContainer.classList.contains('show') ? 'Cancel' : 'Add Your Answer';
    });
  });
});
    </script>

    <!-- Firebase SDK -->
<script src="https://www.gstatic.com/firebasejs/10.5.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/10.5.0/firebase-firestore-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/10.5.0/firebase-auth-compat.js"></script>


</body>
</html>